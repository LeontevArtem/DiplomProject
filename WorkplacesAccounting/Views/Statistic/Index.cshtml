@model WorkplacesAccounting.Models.StatisticModel
<div class="row">
    <div class="col-lg-3 col-6">
        <!-- small card -->
        <div class="small-box bg-info">
            <div class="inner">
                <h3>@Model.AmountOfUsers человек</h3>

                <p>Всего пользователей</p>
            </div>
            <div class="icon">
                <i class="ion ion-stats-bars"></i>
            </div>
            <a href="#" class="small-box-footer">
                More info <i class="fas fa-arrow-circle-right"></i>
            </a>
        </div>
    </div>
    <div class="col-lg-3 col-6">
        <!-- small card -->
        <div class="small-box bg-info">
            <div class="inner">
                <h3>@Model.UsersOnline человек</h3>

                <p>Всего пользователей онлайн</p>
            </div>
            <div class="icon">
                <i class="ion ion-stats-bars"></i>
            </div>
            <a href="#" class="small-box-footer">
                More info <i class="fas fa-arrow-circle-right"></i>
            </a>
        </div>
    </div>
    <!-- ./col -->
    <div class="col-lg-3 col-6">
        <!-- small card -->
        <div class="small-box bg-info">
            <div class="inner">
                <h3>@Model.AverageSessionTimespan часа</h3>

                <p>Среднее время сессии</p>
            </div>
            <div class="icon">
                <i class="ion ion-stats-bars"></i>
            </div>
            
        </div>
    </div>
    
</div>
<div class="card">
    <div class="card-header">
        <h3 class="card-title">Популярные программы</h3>
    </div>
    <!-- /.card-header -->
    <div class="card-body">
        @{
            var List = Model.processWindows.GroupBy(x => x.WindowTitle).OrderBy(x => x.Key);
            int AllCount = Model.processWindows.Count();
            foreach (var Item in List.OrderByDescending(x => x.Count()).ToList().GetRange(0,10))
            {
                int CountRep = Item.Count();
                int Progress = CountRep * 100 / AllCount;
                <p>@Item.Key (@Progress%)</p>
                <div class="progress mb-3">
                    <div class="progress-bar bg-success" role="progressbar" aria-valuenow="40" aria-valuemin="0"
                         aria-valuemax="100" style="width: @Progress%">
                        <span class="sr-only" style="overflow: auto">40% Complete (success)</span>
                    </div>
                </div>
            }
        }
        
        @* <p>Test</p>
        <div class="progress mb-3">
            <div class="progress-bar bg-info" role="progressbar" aria-valuenow="20" aria-valuemin="0"
                 aria-valuemax="100" style="width: 20%">
                <span class="sr-only">20% Complete</span>
            </div>
        </div>
        <p>Test</p>
        <div class="progress mb-3">
            <div class="progress-bar bg-warning" role="progressbar" aria-valuenow="60" aria-valuemin="0"
                 aria-valuemax="100" style="width: 60%">
                <span class="sr-only">60% Complete (warning)</span>
            </div>
        </div>
        <p>Test</p>
        <div class="progress mb-3">
            <div class="progress-bar bg-danger" role="progressbar" aria-valuenow="80" aria-valuemin="0"
                 aria-valuemax="100" style="width: 80%">
                <span class="sr-only">80% Complete</span>
            </div>
        </div> *@
    </div>
    <!-- /.card-body -->
</div>